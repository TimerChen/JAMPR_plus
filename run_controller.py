#
import os
from warnings import warn
from argparse import ArgumentParser
from inspect import cleandoc


SOLOMON_P = {
    'C101': [1800, 827.3, 1],
    'C102': [1800, 827.3, 1],
    'C103': [1800, 826.3, 1],
    'C104': [1800, 822.9, 1],
    'C105': [1800, 827.3, 1],
    'C106': [1800, 827.3, 1],
    'C107': [1800, 827.3, 1],
    'C108': [1800, 827.3, 1],
    'C109': [1800, 827.3, 1],
    'C201': [1800, 589.1, 1],
    'C202': [1800, 589.1, 1],
    'C203': [1800, 588.7, 1],
    'C204': [1800, 588.1, 1],
    'C205': [1800, 586.4, 1],
    'C206': [1800, 586.0, 1],
    'C207': [1800, 585.8, 1],
    'C208': [1800, 585.8, 1],
    'R101': [1800, 1637.7, 1],
    'R102': [1800, 1466.6, 1],
    'R103': [1800, 1208.7, 1],
    'R104': [1800, 971.5, 1],
    'R105': [1800, 1355.3, 1],
    'R106': [1800, 1234.6, 1],
    'R107': [1800, 1064.6, 1],
    'R108': [1800, 932.1, 1],
    'R109': [1800, 1146.9, 1],
    'R110': [1800, 1068.0, 1],
    'R111': [1800, 1048.7, 1],
    'R112': [1800, 948.9, 1],
    'R201': [1800, 1143.2, 1],
    'R202': [1800, 1029.6, 1],
    'R203': [1800, 870.8, 1],
    'R204': [1800, 731.3, 1],
    'R205': [1800, 949.8, 1],
    'R206': [1800, 875.9, 1],
    'R207': [1800, 794.0, 1],
    'R208': [1800, 701.0, 1],
    'R209': [1800, 854.8, 1],
    'R210': [1800, 900.5, 1],
    'R211': [1800, 746.7, 1],
    'RC101': [1800, 1619.8, 1],
    'RC102': [1800, 1457.4, 1],
    'RC103': [1800, 1258.0, 1],
    'RC104': [1800, 1132.3, 1],
    'RC105': [1800, 1513.7, 1],
    'RC106': [1800, 1372.7, 1],
    'RC107': [1800, 1207.8, 1],
    'RC108': [1800, 1114.2, 1],
    'RC201': [1800, 1261.8, 1],
    'RC202': [1800, 1092.3, 1],
    'RC203': [1800, 923.7, 1],
    'RC204': [1800, 783.5, 1],
    'RC205': [1800, 1154.0, 1],
    'RC206': [1800, 1051.1, 1],
    'RC207': [1800, 962.9, 1],
    'RC208': [1800, 776.1, 1],
}
HOMBERGER_P = {
    'C1_2_10': [1800, 2624.7, 1],
    'C1_2_1': [1800, 2698.6, 1],
    'C1_2_2': [1800, 2694.3, 1],
    'C1_2_3': [1800, 2675.8, 1],
    'C1_2_4': [1800, 2625.6, 1],
    'C1_2_5': [1800, 2694.9, 1],
    'C1_2_6': [1800, 2694.9, 1],
    'C1_2_7': [1800, 2694.9, 1],
    'C1_2_8': [1800, 2684.0, 1],
    'C1_2_9': [1800, 2639.6, 1],
    'C2_2_10': [1800, 1791.2, 1],
    'C2_2_1': [1800, 1922.1, 1],
    'C2_2_2': [1800, 1851.4, 1],
    'C2_2_3': [1800, 1763.4, 1],
    'C2_2_4': [1800, 1695.0, 0],
    'C2_2_5': [1800, 1869.6, 1],
    'C2_2_6': [1800, 1844.8, 1],
    'C2_2_7': [1800, 1842.2, 1],
    'C2_2_8': [1800, 1813.7, 1],
    'C2_2_9': [1800, 1815.0, 1],
    'R1_2_10': [1800, 3293.1, 1],
    'R1_2_1': [1800, 4667.2, 1],
    'R1_2_2': [1800, 3919.9, 1],
    'R1_2_3': [1800, 3373.9, 1],
    'R1_2_4': [1800, 3047.6, 1],
    'R1_2_5': [1800, 4053.2, 1],
    'R1_2_6': [1800, 3559.1, 1],
    'R1_2_7': [1800, 3141.9, 1],
    'R1_2_8': [1800, 2938.4, 1],
    'R1_2_9': [1800, 3734.7, 1],
    'R2_2_10': [1800, 2549.4, 1],
    'R2_2_1': [1800, 3468.0, 1],
    'R2_2_2': [1800, 3008.2, 1],
    'R2_2_3': [1800, 2537.5, 1],
    'R2_2_4': [1800, 1928.5, 1],
    'R2_2_5': [1800, 3061.1, 1],
    'R2_2_6': [1800, 2675.4, 1],
    'R2_2_7': [1800, 2304.7, 1],
    'R2_2_8': [1800, 1842.4, 1],
    'R2_2_9': [1800, 2843.3, 1],
    'RC1_2_10': [1800, 2990.5, 0],
    'RC1_2_1': [1800, 3516.9, 1],
    'RC1_2_2': [1800, 3221.6, 1],
    'RC1_2_3': [1800, 3001.4, 1],
    'RC1_2_4': [1800, 2845.2, 1],
    'RC1_2_5': [1800, 3325.6, 1],
    'RC1_2_6': [1800, 3300.7, 1],
    'RC1_2_7': [1800, 3177.8, 1],
    'RC1_2_8': [1800, 3060.0, 1],
    'RC1_2_9': [1800, 3073.3, 0],
    'RC2_2_10': [1800, 1989.2, 0],
    'RC2_2_1': [1800, 2797.4, 1],
    'RC2_2_2': [1800, 2481.6, 1],
    'RC2_2_3': [1800, 2227.7, 1],
    'RC2_2_4': [1800, 1854.8, 1],
    'RC2_2_5': [1800, 2491.4, 1],
    'RC2_2_6': [1800, 2495.1, 1],
    'RC2_2_7': [1800, 2287.7, 1],
    'RC2_2_8': [1800, 2151.2, 1],
    'RC2_2_9': [1800, 2086.6, 1],
    'C1_4_10': [3600, 6825.4, 1],
    'C1_4_1': [3600, 7138.8, 1],
    'C1_4_2': [3600, 7113.3, 1],
    'C1_4_3': [3600, 6929.9, 1],
    'C1_4_4': [3600, 6777.7, 1],
    'C1_4_5': [3600, 7138.8, 1],
    'C1_4_6': [3600, 7140.1, 1],
    'C1_4_7': [3600, 7136.2, 1],
    'C1_4_8': [3600, 7083.0, 1],
    'C1_4_9': [3600, 6927.8, 1],
    'C2_4_10': [3600, 3665.1, 1],
    'C2_4_1': [3600, 4100.3, 1],
    'C2_4_2': [3600, 3914.1, 1],
    'C2_4_3': [3600, 3755.2, 0],
    'C2_4_4': [3600, 3523.7, 0],
    'C2_4_5': [3600, 3923.2, 1],
    'C2_4_6': [3600, 3860.1, 1],
    'C2_4_7': [3600, 3870.9, 1],
    'C2_4_8': [3600, 3773.7, 1],
    'C2_4_9': [3600, 3842.1, 0],
    'R1_4_10': [3600, 8086.4, 0],
    'R1_4_1': [3600, 10305.8, 1],
    'R1_4_2': [3600, 8876.4, 0],
    'R1_4_3': [3600, 7802.8, 0],
    'R1_4_4': [3600, 7269.0, 0],
    'R1_4_5': [3600, 9188.6, 0],
    'R1_4_6': [3600, 8340.4, 1],
    'R1_4_7': [3600, 7602.8, 0],
    'R1_4_8': [3600, 7255.8, 0],
    'R1_4_9': [3600, 8680.6, 0],
    'R2_4_10': [3600, 5645.9, 0],
    'R2_4_1': [3600, 7520.7, 1],
    'R2_4_2': [3600, 6482.8, 1],
    'R2_4_3': [3600, 5372.9, 1],
    'R2_4_4': [3600, 4211.2, 0],
    'R2_4_5': [3600, 6567.9, 0],
    'R2_4_6': [3600, 5818.3, 0],
    'R2_4_7': [3600, 4893.5, 0],
    'R2_4_8': [3600, 4001.0, 0],
    'R2_4_9': [3600, 6067.8, 0],
    'RC1_4_10': [3600, 7585.3, 0],
    'RC1_4_1': [3600, 8524.0, 0],
    'RC1_4_2': [3600, 7884.9, 0],
    'RC1_4_3': [3600, 7516.9, 0],
    'RC1_4_4': [3600, 7295.3, 0],
    'RC1_4_5': [3600, 8172.4, 0],
    'RC1_4_6': [3600, 8148.7, 0],
    'RC1_4_7': [3600, 7935.4, 0],
    'RC1_4_8': [3600, 7765.7, 0],
    'RC1_4_9': [3600, 7722.8, 0],
    'RC2_4_10': [3600, 4252.3, 0],
    'RC2_4_1': [3600, 6147.3, 1],
    'RC2_4_2': [3600, 5407.5, 1],
    'RC2_4_3': [3600, 4573.0, 0],
    'RC2_4_4': [3600, 3597.9, 0],
    'RC2_4_5': [3600, 5396.9, 0],
    'RC2_4_6': [3600, 5332.0, 0],
    'RC2_4_7': [3600, 4987.8, 0],
    'RC2_4_8': [3600, 4706.7, 0],
    'RC2_4_9': [3600, 4510.4, 0],
    'C1_6_10': [3600, 13636.5, 0],
    'C1_6_1': [3600, 14076.6, 0],
    'C1_6_2': [3600, 13948.3, 0],
    'C1_6_3': [3600, 13757.0, 0],
    'C1_6_4': [3600, 13572.2, 0],
    'C1_6_5': [3600, 14066.8, 0],
    'C1_6_6': [3600, 14070.9, 0],
    'C1_6_7': [3600, 14066.8, 0],
    'C1_6_8': [3600, 13991.2, 0],
    'C1_6_9': [3600, 13701.5, 0],
    'C2_6_10': [3600, 7123.9, 0],
    'C2_6_1': [3600, 7752.2, 0],
    'C2_6_2': [3600, 7471.5, 0],
    'C2_6_3': [3600, 7215.0, 0],
    'C2_6_4': [3600, 6877.8, 0],
    'C2_6_5': [3600, 7553.8, 0],
    'C2_6_6': [3600, 7449.8, 0],
    'C2_6_7': [3600, 7491.4, 0],
    'C2_6_8': [3600, 7303.7, 0],
    'C2_6_9': [3600, 7303.2, 0],
    'R1_6_10': [3600, 17648.1, 0],
    'R1_6_1': [3600, 21274.2, 0],
    'R1_6_2': [3600, 18571.7, 0],
    'R1_6_3': [3600, 16940.7, 0],
    'R1_6_4': [3600, 15773.6, 0],
    'R1_6_5': [3600, 19305.7, 0],
    'R1_6_6': [3600, 17790.2, 0],
    'R1_6_7': [3600, 16537.2, 0],
    'R1_6_8': [3600, 15617.3, 0],
    'R1_6_9': [3600, 18510.0, 0],
    'R2_6_10': [3600, 11851.6, 0],
    'R2_6_1': [3600, 15145.3, 0],
    'R2_6_2': [3600, 12986.9, 0],
    'R2_6_3': [3600, 10455.3, 0],
    'R2_6_4': [3600, 7940.3, 0],
    'R2_6_5': [3600, 13809.7, 0],
    'R2_6_6': [3600, 11849.1, 0],
    'R2_6_7': [3600, 9811.0, 0],
    'R2_6_8': [3600, 7512.3, 0],
    'R2_6_9': [3600, 12741.9, 0],
    'RC1_6_10': [3600, 15672.8, 0],
    'RC1_6_1': [3600, 16981.3, 0],
    'RC1_6_2': [3600, 15982.6, 0],
    'RC1_6_3': [3600, 15232.1, 0],
    'RC1_6_4': [3600, 14778.2, 0],
    'RC1_6_5': [3600, 16580.4, 0],
    'RC1_6_6': [3600, 16534.9, 0],
    'RC1_6_7': [3600, 16091.3, 0],
    'RC1_6_8': [3600, 15955.9, 0],
    'RC1_6_9': [3600, 15837.5, 0],
    'RC2_6_10': [3600, 9014.8, 0],
    'RC2_6_1': [3600, 11979.3, 0],
    'RC2_6_2': [3600, 10336.9, 0],
    'RC2_6_3': [3600, 8894.9, 0],
    'RC2_6_4': [3600, 6989.4, 0],
    'RC2_6_5': [3600, 11082.5, 0],
    'RC2_6_6': [3600, 10843.1, 0],
    'RC2_6_7': [3600, 10310.9, 0],
    'RC2_6_8': [3600, 9820.0, 0],
    'RC2_6_9': [3600, 9449.4, 0],
    'C1_8_10': [3600, 24030.4, 0],
    'C1_8_1': [3600, 25156.9, 0],
    'C1_8_2': [3600, 24974.1, 0],
    'C1_8_3': [3600, 24198.9, 0],
    'C1_8_4': [3600, 23812.7, 0],
    'C1_8_5': [3600, 25138.6, 0],
    'C1_8_6': [3600, 25133.3, 0],
    'C1_8_7': [3600, 25127.3, 0],
    'C1_8_8': [3600, 24882.5, 0],
    'C1_8_9': [3600, 24200.4, 0],
    'C2_8_10': [3600, 10946.0, 0],
    'C2_8_1': [3600, 11631.9, 0],
    'C2_8_2': [3600, 11394.5, 0],
    'C2_8_3': [3600, 11138.1, 0],
    'C2_8_4': [3600, 10682.8, 0],
    'C2_8_5': [3600, 11395.6, 0],
    'C2_8_6': [3600, 11316.3, 0],
    'C2_8_7': [3600, 11332.9, 0],
    'C2_8_8': [3600, 11133.9, 0],
    'C2_8_9': [3600, 11140.4, 0],
    'R1_8_10': [3600, 31059.8, 0],
    'R1_8_1': [3600, 36393.3, 0],
    'R1_8_2': [3600, 32352.3, 0],
    'R1_8_3': [3600, 29429.1, 0],
    'R1_8_4': [3600, 27844.4, 0],
    'R1_8_5': [3600, 33640.0, 0],
    'R1_8_6': [3600, 30989.5, 0],
    'R1_8_7': [3600, 28954.7, 0],
    'R1_8_8': [3600, 27715.8, 0],
    'R1_8_9': [3600, 32381.1, 0],
    'R2_8_10': [3600, 20016.5, 0],
    'R2_8_1': [3600, 24986.8, 0],
    'R2_8_2': [3600, 21330.2, 0],
    'R2_8_3': [3600, 17238.1, 0],
    'R2_8_4': [3600, 13198.4, 0],
    'R2_8_5': [3600, 22802.0, 0],
    'R2_8_6': [3600, 19754.5, 0],
    'R2_8_7': [3600, 16400.3, 0],
    'R2_8_8': [3600, 12708.5, 0],
    'R2_8_9': [3600, 21298.8, 0],
    'RC1_8_10': [3600, 28210.7, 0],
    'RC1_8_1': [3600, 30039.5, 0],
    'RC1_8_2': [3600, 28363.3, 0],
    'RC1_8_3': [3600, 27504.5, 0],
    'RC1_8_4': [3600, 26595.4, 0],
    'RC1_8_5': [3600, 29306.4, 0],
    'RC1_8_6': [3600, 29247.1, 0],
    'RC1_8_7': [3600, 28858.6, 0],
    'RC1_8_8': [3600, 28505.0, 0],
    'RC1_8_9': [3600, 28400.5, 0],
    'RC2_8_10': [3600, 14445.3, 0],
    'RC2_8_1': [3600, 19213.2, 0],
    'RC2_8_2': [3600, 16712.0, 0],
    'RC2_8_3': [3600, 14046.1, 0],
    'RC2_8_4': [3600, 11031.6, 0],
    'RC2_8_5': [3600, 17493.3, 0],
    'RC2_8_6': [3600, 17250.1, 0],
    'RC2_8_7': [3600, 16445.4, 0],
    'RC2_8_8': [3600, 15601.6, 0],
    'RC2_8_9': [3600, 15251.7, 0],
    'C1_10_10': [7200, 39874.5, 0],
    'C1_10_1': [7200, 42444.8, 0],
    'C1_10_2': [7200, 41392.7, 0],
    'C1_10_3': [7200, 40146.2, 0],
    'C1_10_4': [7200, 39490.9, 0],
    'C1_10_5': [7200, 42434.8, 0],
    'C1_10_6': [7200, 42437.0, 0],
    'C1_10_7': [7200, 42420.4, 0],
    'C1_10_8': [7200, 41837.8, 0],
    'C1_10_9': [7200, 40366.7, 0],
    'C2_10_10': [7200, 15728.6, 0],
    'C2_10_1': [7200, 16841.1, 0],
    'C2_10_2': [7200, 16462.6, 0],
    'C2_10_3': [7200, 16036.5, 0],
    'C2_10_4': [7200, 15482.9, 0],
    'C2_10_5': [7200, 16521.3, 0],
    'C2_10_6': [7200, 16290.7, 0],
    'C2_10_7': [7200, 16378.4, 0],
    'C2_10_8': [7200, 16029.1, 0],
    'C2_10_9': [7200, 16077.0, 0],
    'R1_10_10': [7200, 47570.6, 0],
    'R1_10_1': [7200, 53233.9, 0],
    'R1_10_2': [7200, 48369.1, 0],
    'R1_10_3': [7200, 44862.4, 0],
    'R1_10_4': [7200, 42577.9, 0],
    'R1_10_5': [7200, 50487.8, 0],
    'R1_10_6': [7200, 47145.8, 0],
    'R1_10_7': [7200, 44231.4, 0],
    'R1_10_8': [7200, 42435.9, 0],
    'R1_10_9': [7200, 49334.3, 0],
    'R2_10_10': [7200, 29956.9, 0],
    'R2_10_1': [7200, 36899.4, 0],
    'R2_10_2': [7200, 31296.2, 0],
    'R2_10_3': [7200, 24422.1, 0],
    'R2_10_4': [7200, 17968.1, 0],
    'R2_10_5': [7200, 34233.0, 0],
    'R2_10_6': [7200, 29215.3, 0],
    'R2_10_7': [7200, 23243.8, 0],
    'R2_10_8': [7200, 17512.7, 0],
    'R2_10_9': [7200, 32104.9, 0],
    'RC1_10_10': [7200, 43745.6, 0],
    'RC1_10_1': [7200, 45948.5, 0],
    'RC1_10_2': [7200, 43870.6, 0],
    'RC1_10_3': [7200, 42338.0, 0],
    'RC1_10_4': [7200, 41469.2, 0],
    'RC1_10_5': [7200, 45235.5, 0],
    'RC1_10_6': [7200, 45144.0, 0],
    'RC1_10_7': [7200, 44686.2, 0],
    'RC1_10_8': [7200, 44130.8, 0],
    'RC1_10_9': [7200, 44072.4, 0],
    'RC2_10_10': [7200, 21848.3, 0],
    'RC2_10_1': [7200, 28190.8, 0],
    'RC2_10_2': [7200, 24271.7, 0],
    'RC2_10_3': [7200, 19747.9, 0],
    'RC2_10_4': [7200, 15804.9, 0],
    'RC2_10_5': [7200, 25892.3, 0],
    'RC2_10_6': [7200, 25871.0, 0],
    'RC2_10_7': [7200, 24451.7, 0],
    'RC2_10_8': [7200, 23332.3, 0],
    'RC2_10_9': [7200, 22859.3, 0],
}


def write_bash_script(cfg):
    """Write bash script to run controller on specified instance."""
    script = cleandoc(F"""
        #!/usr/bin/env bash
        {cfg['ctrl_pth']} JAMPR {cfg['data_pth']} {cfg['cpu_mark']} {cfg['time_limit']} {cfg['BKS']} {cfg['optimal']} {cfg['solver_pth']}
        wait
        echo "job finished."
        """)
    return script


def get_args():
    """Read in cmd arguments"""
    parser = ArgumentParser(description='Run DIMACS controller for specified instance')
    parser.add_argument('--version', '-v', action='version', version='%(prog)s 0.1')
    parser.add_argument('--ctrl_pth', '-c', type=str, default='~/DIMACS_challenge/VRPTWController/build/VRPTWController')
    parser.add_argument('--data_dir', '-d', type=str, default='~/DIMACS_challenge/VRPTWController/Instances/')
    parser.add_argument('--data_source', '-r', type=str, default='Solomon')
    parser.add_argument('--id', type=str)
    parser.add_argument('--solver_pth', '-s', type=str, default='./solver')
    parser.add_argument('--cpu_mark', type=int, default=2743)
    parser.add_argument('--time_limit_override', type=int, default=None)
    parser.add_argument('--dry_run', action='store_true', help='only write bash file without executing.')
    parser.add_argument('--args', type=str, default='', help="additional command line arguments as one string.")
    args = vars(parser.parse_args())  # parse to dict
    return args


def get_run_params(instance_id, source):
    """Get the corresponding instance run parameters."""
    key = instance_id.upper()
    if "solomon" in source.lower():
        return SOLOMON_P[key]
    elif "homberger" in source.lower():
        return HOMBERGER_P[key]
    else:
        raise ValueError(f"unknown instance: src={source}, id={instance_id}")


def execute_bash():
    """Create and run bash script for DIMACS controller"""
    args = get_args()
    cwd = os.getcwd()
    path = os.path.join(cwd, f"challenge/bash_scripts/")
    os.makedirs(path, exist_ok=True)
    _kwargs = args['args']

    instance_id = args['id']
    source = args['data_source']
    data_pth = os.path.join(args['data_dir'], source, (instance_id+f".txt"))
    print(data_pth)
    # get params
    time_limit, bks, opt = get_run_params(instance_id, source)

    if args['time_limit_override'] is not None:
        warn(f"overwriting time limit: {time_limit} -> {args['time_limit_override']}")
        time_limit = args['time_limit_override']

    # assemble cfg
    run_cfg = {
        'ctrl_pth': args['ctrl_pth'],
        'data_pth': data_pth,
        'cpu_mark': args['cpu_mark'],
        'time_limit': time_limit,
        'BKS': bks,
        'optimal': opt,
        'solver_pth': args['solver_pth']    # must be executable -> "sudo chmod +x solver"
    }
    fpath = os.path.join(path, f"run_controller_{source}-{instance_id}.sh")
    if os.path.exists(fpath):
        print(f"Bash file exists already: {fpath} \nOverwrite file? (y/n)")
        a = input()
        if a != 'y':
            print('Could not write to configuration file.')
            return
    # write script file
    script = write_bash_script(run_cfg)
    with open(fpath, "w") as file:
        file.write(script)

    # execute script
    if not args['dry_run']:
        print(f"Executing script {fpath}...")
        os.system(F"sh {fpath}")
    print(f" done.")


if __name__ == "__main__":
    execute_bash()
